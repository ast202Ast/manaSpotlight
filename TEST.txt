import express from 'express';
const router = express.Router();

// Mock database
const users = [
  {
    first_name: 'John',
    last_name: 'Doe',
    email: 'johndoe@example.com',
  },
  {
    first_name: 'Alice',
    last_name: 'Smith',
    email: 'alicesmith@example.com',
  },
];

// Getting the list of users from the mock database
router.get('/', (req, res) => {
    res.send(users);

#################

const sqlite = require("sqlite3").verbose();
const db = new sqlite.Database("./test.db", (err) => {

  if (err) {
    return console.log(err);
  }
  console.log("connexion reussie");
});

const creation = "CREATE TABLE IF NOT EXISTS users(id integer PRIMARY KEY AUTOINCREMENT, name text NOT NULL, email text NOT NULL, age integer NOT NULL)";
const insertion = "INSERT INTO users(name, email, age) VALUES (?, ?, ?)";

db.run(creation, (error) => {
    // db.run(insertion, ["Charlie", "charlie@gmail.com", 22]);
    // db.run(insertion, ["Paul", "charlie@gmail.com", 34]);
    // db.run(insertion, ["Karmen", "charlie@gmail.com", 11]);

    db.all("SELECT * FROM users", (error, rows) => {
     console.log(rows)
    })

    // db.run("UPDATE users SET age = ? WHERE id = ?", [55, 1], (errors) => {
    //   if (error) {
    //     return console.error"(Erreur de modification :", error.message);
    //   }
    //   console.log("Utilisateur modifie avec succes.");

    //   db.all("SELECT * FROM users", (error, rows) => {
    //     if (error) {
    //       return console.error("Erreur lors de la recuperation :", error.message);
    //     }        
    //     console.log(rows);
    //   })}
    // )

    // db.run("DELETE FROM users WHERE id = ?", [2], (error) => {
    //  db.all("SELECT * FROM users", (error, rows) => {
    //    console.log(rows)
    //  })
    // })
})

db.close((err) => {
  if (err) {
    return console.log(err);
  }
  console.log("connection fermee");
})

#############################

_db.serialize(() => {
    _db.run("CREATE TABLE IF NOT EXISTS lorem (info TEXT)", function(err){
        if(err){
            console.log(err)
        }
    });

    const stmt = _db.prepare("INSERT INTO lorem VALUES (?)");
    for (let i = 0; i < 10; i++) {
        stmt.run("Ipsum " + i);
    }
    stmt.finalize();

    _db.each("SELECT rowid AS id, info FROM lorem", (err, row) => {
        console.log(row.id + ": " + row.info);
    });
});

_db.close();

class Database{
    /**  @type {sqlite3.Database|null} */
    db = null;
    static instance = null;
    constructor(){
        // vÃ©rification de l'instance de la base de donnÃ©e
        if(Database.instance){
            
            Database.instance = this;
        }
        // Si sa existe ont lui redonne l'instance de la class this
        this.init();
        Database.instance = this;
        // Si sa n'existe pas on initilise la connection Ã  la base de donnÃ©e et ont lui redonne this
    } 
    init(){
        const dbPath = process.cwd()+ "/"+ process.env.DB;
        this.db = new sqlite3.Database(dbPath, sqlite3.OPEN_READWRITE || sqlite3.OPEN_CREATE, function(err){
            if(err){
                console.log("Il y Ã  erreur Ã  la DB");
                throw err
            }
            console.log("Vous Ãªtes connectÃ© au DB");
        });

    }
    run(sql , params= []){
        return   this.db.run(sql, params, function(err){
            if(err){
                console.log("Une erreur est survenu lors de l'exercution");
                throw err;
            }
        })  
    }
    query(sql , params= []){
        return   this.db.all(sql, params, function(err){
            if(err){
                console.log("Une erreur est survenu lors de l'exercution");
                throw err;
            }
        })
    }
    close(params) {
       this.db.close(function(err){
        if(err){
            console.log("Erreur");
            throw err;
        }
       })
    }
    
}

export const db = new  Database();

############################

const sqlite3 = require('sqlite3').verbose();

// Connexion Ã  la base SQLite (crÃ©era le fichier si non existant)
const db = new sqlite3.Database('./database/projecteurs.db', (err) => {
    if (err) {
        console.error('Erreur de connexion Ã  la base de donnÃ©es', err.message);
    } else {
        console.log('ConnectÃ© Ã  la base SQLite');
    }
});

// CrÃ©ation des tables
db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS utilisateurs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nom TEXT NOT NULL,
        email TEXT UNIQUE NOT NULL,
        mot_de_passe TEXT NOT NULL,
        role TEXT CHECK(role IN ('etudiant', 'enseignant', 'admin')) NOT NULL
    )`);

    db.run(`CREATE TABLE IF NOT EXISTS projecteurs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nom TEXT NOT NULL,
        etat TEXT CHECK(etat IN ('fonctionnel', 'en panne')) DEFAULT 'fonctionnel',
        disponibilite BOOLEAN DEFAULT 1
    )`);

    db.run(`CREATE TABLE IF NOT EXISTS reservations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        utilisateur_id INTEGER NOT NULL,
        projecteur_id INTEGER NOT NULL,
        date_reservation TEXT NOT NULL,
        heure_debut TEXT NOT NULL,
        heure_fin TEXT NOT NULL,
        FOREIGN KEY(utilisateur_id) REFERENCES utilisateurs(id),
        FOREIGN KEY(projecteur_id) REFERENCES projecteurs(id)
    )`);
});

module.exports = db;

#####################

// Test de la creation des tables
db.all("SELECT name FROM sqlite_master WHERE type='table'", [], (err, tables) => {
    if (err) {
      console.error('Erreur lors de la rÃ©cupÃ©ration des tables:', err.message);
      return;
    }
  
    if (tables.length === 0) {
      console.log("Aucune table trouvÃ©e.");
      return;
    }
  
    console.log("\nðŸ“Œ Liste des tables :");
    tables.forEach((table) => {
      console.log(`- ${table.name}`);
  
      // Pour chaque table, afficher les colonnes et leurs types
      db.all(`PRAGMA table_info(${table.name})`, [], (err, columns) => {
        if (err) {
          console.error(`Erreur lors de la rÃ©cupÃ©ration des colonnes de ${table.name}:`, err.message);
          return;
        }
  
        console.log(`  ðŸ“œ Colonnes de '${table.name}':`);
        columns.forEach((col) => {
          console.log(`    - ${col.name} (${col.type})`);
        });
      });
    });
  });

  ###################

  // Requetes SQLite
      getAll: (callback) => {
        db.all('SELECT * FROM projectors', [], callback);
    },
    
    getById: (id, callback) => {
        db.get('SELECT * FROM projectors WHERE id = ?', [id], callback);
    },
    
    create: (name, status, callback) => {
        db.run('INSERT INTO projectors (name, status) VALUES (?, ?)', [name, status], callback);
    },

    update: (id, name, status, callback) => {
        db.run('UPDATE projectors SET name = ?, status = ? WHERE id = ?', [name, status, id], callback);
    },

    delete: (id, callback) => {
        db.run('DELETE FROM projectors WHERE id = ?', [id], callback);
    },

    ##################

    const Projector = require('../models/Projector');

const projectorController = {
    getAllProjectors: (req, res) => {
        Projector.getAll((err, rows) => {
            if (err) {
                return res.status(500).json({ error: err.message });
            }
            res.json(rows);
        });
    },

    getProjectorById: (req, res) => {
        const { id } = req.params;
        Projector.getById(id, (err, row) => {
            if (err) {
                return res.status(500).json({ error: err.message });
            }
            res.json(row);
        });
    },

    createProjector: (req, res) => {
        const { name, status } = req.body;
        Projector.create(name, status, (err) => {
            if (err) {
                return res.status(500).json({ error: err.message });
            }
            res.json({ message: 'Projecteur ajoutÃ© avec succÃ¨s' });
        });
    }
};

module.exports = projectorController;

##################

Voici les 4 fichiers voit ou sont les erreurs :

"
// fichier app.js

import express from 'express'
import db from './src/database/database.js'
import projecteurRoutes from './src/routes/routes.js'
import spotlight from './src/models/spotlight.js'

const app = express()
const port = 3000

app.use(express.json())

app.get('/', (req, res) => res.send('Allons-y'))
app.post('/users', projecteurRoutes.createUser)
app.get('/users', projecteurRoutes.getAllUsers)
app.get('/users/:id', projecteurRoutes.getUser)
app.post('/spotlights', projecteurRoutes.createSpotlight)
app.get('/spotlights', projecteurRoutes.getAllSpotlights)

app.listen(port, () => console.log(`L'application a demarre sur le port ${port}.`))
"

"
// fichier database.js

import sqlite3 from 'sqlite3'

const sqlite = sqlite3.verbose()
const db = new sqlite.Database('./src/database/spotlight.sqlite', (err) => {
    if (err) {
        console.error('Erreur de connexion Ã  la base de donnÃ©es SQLite', err.message)
    } else {
        console.log('ConnectÃ© Ã  la base de donnees SQLite')
    }
})

db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS utilisateurs (
        id_utilisateur INTEGER PRIMARY KEY AUTOINCREMENT,
        nom TEXT NOT NULL,
        prenom TEXT NOT NULL,
        email TEXT UNIQUE NOT NULL,
        mot_de_passe TEXT NOT NULL,
        role TEXT CHECK(role IN ('etudiant', 'enseignant', 'admin')) NOT NULL
    )`)

    db.run(`CREATE TABLE IF NOT EXISTS projecteurs (
        id_projecteur INTEGER PRIMARY KEY AUTOINCREMENT,
        nom_projecteur TEXT NOT NULL,
        etat_projecteur TEXT CHECK(etat_projecteur IN ('fonctionnel', 'non fonctionnel')) NOT NULL
    )`)

    db.run(`CREATE TABLE IF NOT EXISTS reservations (
        id_reservations INTEGER PRIMARY KEY AUTOINCREMENT,
        id_utilisateur INTEGER NOT NULL,
        id_projecteur INTEGER NOT NULL,
        date_debut TEXT NOT NULL,
        date_fin TEXT NOT NULL,
        FOREIGN KEY(id_utilisateur) REFERENCES utilisateurs(id_utilisateur),
        FOREIGN KEY(id_projecteur) REFERENCES projecteurs(id_projecteur)
    )`)
})


db.close()

export default db

// const insertion = "INSERT INTO users(name, email, age) VALUES (?, ?, ?)";
"

"
// fichier spotlight.js

import db from './../database/database.js'

const spotlight = {
  createUser: (nom, prenom, email, mot_de_passe, role, callback) => {
    db.run('INSERT INTO utilisateurs (nom, prenom, email, mot_de_passe, role) VALUES (?, ?, ?, ?, ?)', [nom, prenom, email, mot_de_passe, role], callback)
  },
  
  getAllUsers: (callback) => {
    db.all('SELECT * FROM utilisateurs', [], callback)
  },

  getUser: (callback) => {
    db.get('SELECT * FROM utilisateurs WHERE id_utilisateur = ?', [id_utilisateur], callback)
  },

  deleteUser: (callback) => {
    db.run('DELETE FROM utilisateurs WHERE id_utilisateur = ?', [id_utilisateur], callback)
  },

  createSpotlight: (nom_projecteur, etat_projecteur, callback) => {
    db.run('INSERT INTO projecteurs (nom_projecteur, etat_projecteur) VALUES (?, ?)', [nom_projecteur, etat_projecteur], callback)
  },
  
  getAllSpotlights: (callback) => {
    db.all('SELECT * FROM projecteurs', [], callback)
  }
};

export default spotlight
"

"
// fichier routes.js

import spotlight from "../models/spotlight.js";

const projecteurRoutes = {
    createUser: (req, res) => {
        const { nom, prenom, email, mot_de_passe, role } = req.body
        spotlight.createUser(nom, prenom, email, mot_de_passe, role, (err) => {
            if (err) {
                return res.status(500).json({ error: err.message });
            }
            res.json({ message: 'Utilisateur cree' });
        });
    },

    getAllUsers: (req, res) => {
      spotlight.getAllUsers((err, rows) => {
        if (err) {
          return res.status(500).json({ error: err.message })
        }
        res.json(rows)
      }
    )},

    getUser: (req, res) => {
        const { id_utilisateur } = req.params;
        spotlight.getUser(id_utilisateur, (err, row) => {
            if (err) {
                return res.status(500).json({ error: err.message });
            }
            res.json(row);
        });
    },

    createSpotlight: (req, res) => {
        const { nom_projecteur, etat_projecteur } = req.body
        spotlight.createSpotlight(nom_projecteur, etat_projecteur, (err) => {
            if (err) {
                return res.status(500).json({ error: err.message });
            }
            res.json({ message: 'Projecteur cree' });
        });
    },

    getAllSpotlights: (req, res) => {
        spotlight.getAllSpotlights((err, rows) => {
          if (err) {
            return res.status(500).json({ error: err.message })
          }
          res.json(rows)
        }
    )},
};

export default projecteurRoutes
"

#######################

// Les tests

{
  "nom": "",
  "prenom": "",
  "email": "",
  "mot_de_passe": "",
  "role": ""
}

{
  "nom_projecteur": "",
  "etat_projecteur": ""
}

{
  "id_utilisateur": "",
  "id_projecteur": "",
  "date_debut": "",
  "date_fin": ""
}